{"version":3,"sources":["../../src/helpers/getBlockNumberByTimestamp.ts"],"sourcesContent":["import { PublicClient } from 'viem';\nimport {\n  arbitrum,\n  avalanche,\n  avalancheFuji,\n  base,\n  bsc,\n  bscTestnet,\n  goerli,\n  mainnet,\n  metis,\n  optimism,\n  optimismGoerli,\n  polygon,\n  polygonMumbai,\n  sepolia,\n} from 'viem/chains';\n\nconst getAverageBlockTime = (chainId: number) => {\n  switch (chainId) {\n    case mainnet.id:\n      return 13;\n    case polygon.id:\n      return 3;\n    case avalanche.id:\n      return 5;\n    case bsc.id:\n      return 4;\n    case base.id:\n      return 2;\n    case arbitrum.id:\n      return 1;\n    case metis.id:\n      return 2;\n    case optimism.id:\n      return 2;\n    case sepolia.id:\n      return 13;\n    case goerli.id:\n      return 13;\n    case optimismGoerli.id:\n      return 2;\n    case avalancheFuji.id:\n      return 5;\n    case polygonMumbai.id:\n      return 3;\n    case bscTestnet.id:\n      return 4;\n    default:\n      return 13;\n  }\n};\n\nexport async function getBlockNumberByTimestamp(\n  chainId: number,\n  targetTimestamp: number,\n  client: PublicClient,\n) {\n  const blocksDiff = 100;\n  const MAX_ITERATIONS = 10;\n\n  let iterationCount = 0;\n  let averageBlockTime = getAverageBlockTime(chainId);\n\n  const currentBlock = await client.getBlock({ blockTag: 'latest' });\n\n  if (targetTimestamp > currentBlock.timestamp) {\n    throw new Error('Target timestamp is in the future.');\n  }\n\n  let previousBlockTimestamp = Number(currentBlock.timestamp);\n  let previousBlockNumber = Number(currentBlock.number);\n  let estimatedBlockNumber;\n  let estimatedBlock;\n\n  do {\n    // Make a guess\n\n    if (previousBlockTimestamp >= targetTimestamp) {\n      // step back\n      estimatedBlockNumber =\n        previousBlockNumber -\n        Math.floor(\n          (previousBlockTimestamp - targetTimestamp) / averageBlockTime,\n        );\n    } else {\n      // step forward\n      estimatedBlockNumber =\n        previousBlockNumber +\n        Math.floor(\n          (previousBlockTimestamp - targetTimestamp) / averageBlockTime,\n        );\n    }\n\n    if (estimatedBlockNumber < 0) {\n      throw new Error('Estimated block number is below zero.');\n    }\n\n    // Get block data\n    estimatedBlock = await client.getBlock({\n      blockNumber: BigInt(estimatedBlockNumber),\n    });\n\n    // Calculate a new average block time based on the difference of the timestamps\n    averageBlockTime = Math.ceil(\n      (Number(estimatedBlock.timestamp) - previousBlockTimestamp) /\n        (estimatedBlockNumber - previousBlockNumber),\n    );\n\n    previousBlockTimestamp = Number(estimatedBlock.timestamp);\n    previousBlockNumber = Number(estimatedBlock.number);\n\n    iterationCount++;\n  } while (\n    Math.abs(Number(estimatedBlock.timestamp) - targetTimestamp) >\n      blocksDiff * averageBlockTime &&\n    iterationCount < MAX_ITERATIONS\n  );\n\n  if (iterationCount === MAX_ITERATIONS) {\n    throw new Error('Maximum iterations reached without converging.');\n  }\n\n  // if estimated block timestamp <= target\n  let minBlockNumber = Number(estimatedBlock.number) - 1;\n  let maxBlockNumber = Number(estimatedBlock.number) + blocksDiff * 2;\n\n  // if estimated block timestamp > target\n  if (estimatedBlock.timestamp > targetTimestamp) {\n    minBlockNumber = Number(estimatedBlock.number) - blocksDiff * 2;\n    maxBlockNumber = Number(estimatedBlock.number);\n  }\n\n  return {\n    minBlockNumber,\n    maxBlockNumber,\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AACA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;AAEP,IAAM,sBAAsB,CAAC,YAAoB;AAC/C,UAAQ,SAAS;AAAA,IACf,KAAK,QAAQ;AACX,aAAO;AAAA,IACT,KAAK,QAAQ;AACX,aAAO;AAAA,IACT,KAAK,UAAU;AACb,aAAO;AAAA,IACT,KAAK,IAAI;AACP,aAAO;AAAA,IACT,KAAK,KAAK;AACR,aAAO;AAAA,IACT,KAAK,SAAS;AACZ,aAAO;AAAA,IACT,KAAK,MAAM;AACT,aAAO;AAAA,IACT,KAAK,SAAS;AACZ,aAAO;AAAA,IACT,KAAK,QAAQ;AACX,aAAO;AAAA,IACT,KAAK,OAAO;AACV,aAAO;AAAA,IACT,KAAK,eAAe;AAClB,aAAO;AAAA,IACT,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,cAAc;AACjB,aAAO;AAAA,IACT,KAAK,WAAW;AACd,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,SAAsB,0BACpB,SACA,iBACA,QACA;AAAA;AACA,UAAM,aAAa;AACnB,UAAM,iBAAiB;AAEvB,QAAI,iBAAiB;AACrB,QAAI,mBAAmB,oBAAoB,OAAO;AAElD,UAAM,eAAe,MAAM,OAAO,SAAS,EAAE,UAAU,SAAS,CAAC;AAEjE,QAAI,kBAAkB,aAAa,WAAW;AAC5C,YAAM,IAAI,MAAM,oCAAoC;AAAA,IACtD;AAEA,QAAI,yBAAyB,OAAO,aAAa,SAAS;AAC1D,QAAI,sBAAsB,OAAO,aAAa,MAAM;AACpD,QAAI;AACJ,QAAI;AAEJ,OAAG;AAGD,UAAI,0BAA0B,iBAAiB;AAE7C,+BACE,sBACA,KAAK;AAAA,WACF,yBAAyB,mBAAmB;AAAA,QAC/C;AAAA,MACJ,OAAO;AAEL,+BACE,sBACA,KAAK;AAAA,WACF,yBAAyB,mBAAmB;AAAA,QAC/C;AAAA,MACJ;AAEA,UAAI,uBAAuB,GAAG;AAC5B,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACzD;AAGA,uBAAiB,MAAM,OAAO,SAAS;AAAA,QACrC,aAAa,OAAO,oBAAoB;AAAA,MAC1C,CAAC;AAGD,yBAAmB,KAAK;AAAA,SACrB,OAAO,eAAe,SAAS,IAAI,2BACjC,uBAAuB;AAAA,MAC5B;AAEA,+BAAyB,OAAO,eAAe,SAAS;AACxD,4BAAsB,OAAO,eAAe,MAAM;AAElD;AAAA,IACF,SACE,KAAK,IAAI,OAAO,eAAe,SAAS,IAAI,eAAe,IACzD,aAAa,oBACf,iBAAiB;AAGnB,QAAI,mBAAmB,gBAAgB;AACrC,YAAM,IAAI,MAAM,gDAAgD;AAAA,IAClE;AAGA,QAAI,iBAAiB,OAAO,eAAe,MAAM,IAAI;AACrD,QAAI,iBAAiB,OAAO,eAAe,MAAM,IAAI,aAAa;AAGlE,QAAI,eAAe,YAAY,iBAAiB;AAC9C,uBAAiB,OAAO,eAAe,MAAM,IAAI,aAAa;AAC9D,uBAAiB,OAAO,eAAe,MAAM;AAAA,IAC/C;AAEA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;","names":[]}