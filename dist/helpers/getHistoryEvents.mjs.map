{"version":3,"sources":["../../src/helpers/getHistoryEvents.ts"],"sourcesContent":["import { PublicClient } from '@wagmi/core';\nimport { Hex } from 'viem';\n\nimport {\n  govCoreContract,\n  payloadsControllerContract,\n  votingMachineContract,\n} from './contracts';\nimport { blockLimit, getEventsBySteps } from './eventsHelpres';\n\n// payloads created\nasync function getPayloadsCreatedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const payloadsController = payloadsControllerContract({\n    contractAddress,\n    client,\n  });\n\n  const events = await client.getContractEvents({\n    abi: payloadsController.abi,\n    eventName: 'PayloadCreated',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      payloadId: event.args.payloadId,\n      chainId,\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n      payloadsController: contractAddress,\n    }));\n}\n\nexport async function getPayloadsCreated(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getPayloadsCreatedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n      chainId,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// proposal created\nasync function getProposalCreatedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const govCore = govCoreContract({ contractAddress, client });\n\n  const events = await client.getContractEvents({\n    abi: govCore.abi,\n    eventName: 'ProposalCreated',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      proposalId: Number(event.args.proposalId),\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n    }));\n}\n\nexport async function getProposalCreated(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getProposalCreatedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// proposal activate for voting\nasync function getProposalActivatedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const govCore = govCoreContract({ contractAddress, client });\n\n  const events = await client.getContractEvents({\n    abi: govCore.abi,\n    eventName: 'VotingActivated',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      proposalId: Number(event.args.proposalId),\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n    }));\n}\n\nexport async function getProposalActivated(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getProposalActivatedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// voting activate on VM\nasync function getProposalActivatedOnVMEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const votingMachine = votingMachineContract({ contractAddress, client });\n\n  const events = await client.getContractEvents({\n    abi: votingMachine.abi,\n    eventName: 'ProposalVoteStarted',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      proposalId: Number(event.args.proposalId),\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n    }));\n}\n\nexport async function getProposalActivatedOnVM(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getProposalActivatedOnVMEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// voting closed on VM and voting results sent\nasync function getProposalVotingClosedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const votingMachine = votingMachineContract({ contractAddress, client });\n\n  const events = await client.getContractEvents({\n    abi: votingMachine.abi,\n    eventName: 'ProposalResultsSent',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      proposalId: Number(event.args.proposalId),\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n    }));\n}\n\nexport async function getProposalVotingClosed(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getProposalVotingClosedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// proposal queued\nasync function getProposalQueuedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const govCore = govCoreContract({ contractAddress, client });\n\n  const events = await client.getContractEvents({\n    abi: govCore.abi,\n    eventName: 'ProposalQueued',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      proposalId: Number(event.args.proposalId),\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n    }));\n}\n\nexport async function getProposalQueued(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getProposalQueuedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// payloads queued\nasync function getPayloadsQueuedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const payloadsController = payloadsControllerContract({\n    contractAddress,\n    client,\n  });\n\n  const events = await client.getContractEvents({\n    abi: payloadsController.abi,\n    eventName: 'PayloadQueued',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      payloadId: event.args.payloadId,\n      chainId,\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n      payloadsController: contractAddress,\n    }));\n}\n\nexport async function getPayloadsQueued(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getPayloadsQueuedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n      chainId,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n\n// payloads executed\nasync function getPayloadsExecutedEvents(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const payloadsController = payloadsControllerContract({\n    contractAddress,\n    client,\n  });\n\n  const events = await client.getContractEvents({\n    abi: payloadsController.abi,\n    eventName: 'PayloadExecuted',\n    fromBlock: BigInt(startBlock),\n    toBlock: BigInt(endBlock),\n  });\n\n  return events\n    .sort((a, b) => Number(b.blockNumber) - Number(a.blockNumber))\n    .map((event) => ({\n      payloadId: event.args.payloadId,\n      chainId,\n      transactionHash: event.transactionHash,\n      blockNumber: Number(event.blockNumber),\n      payloadsController: contractAddress,\n    }));\n}\n\nexport async function getPayloadsExecuted(\n  contractAddress: Hex,\n  client: PublicClient,\n  startBlock: number,\n  endBlock: number,\n  chainId: number,\n) {\n  const callbackFunc = async (\n    startBlockNumber: number,\n    endBlockNumber: number,\n  ) => {\n    return await getPayloadsExecutedEvents(\n      contractAddress,\n      client,\n      startBlockNumber,\n      endBlockNumber,\n      chainId,\n    );\n  };\n\n  return getEventsBySteps(startBlock, endBlock, blockLimit, callbackFunc);\n}\n"],"mappings":"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","names":[]}