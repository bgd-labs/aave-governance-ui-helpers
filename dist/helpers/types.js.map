{"version":3,"sources":["../../src/helpers/types.ts"],"sourcesContent":["import { Hex } from 'viem';\n\n// from contracts\ntype PayloadStructOutput = {\n  chain: bigint;\n  accessLevel: number;\n  payloadsController: Hex;\n  payloadId: number;\n};\n\nexport type ProposalStructOutput = {\n  id: bigint;\n  votingChainId: bigint;\n  proposalData: {\n    state: number;\n    accessLevel: number;\n    creationTime: number;\n    votingDuration: number;\n    votingActivationTime: number;\n    queuingTime: number;\n    cancelTimestamp: number;\n    creator: Hex;\n    votingPortal: Hex;\n    snapshotBlockHash: Hex;\n    ipfsHash: Hex;\n    forVotes: bigint;\n    againstVotes: bigint;\n    cancellationFee: bigint;\n    payloads: Readonly<PayloadStructOutput[]>;\n  };\n};\n\ntype VMProposalWithoutVotesStructOutput = {\n  id: bigint;\n  sentToGovernance: boolean;\n  startTime: number;\n  endTime: number;\n  votingClosedAndSentTimestamp: number;\n  forVotes: bigint;\n  againstVotes: bigint;\n  creationBlockNumber: bigint;\n  votingClosedAndSentBlockNumber: bigint;\n};\n\nexport type VMProposalStructOutput = {\n  proposalData: Readonly<VMProposalWithoutVotesStructOutput>;\n  votedInfo: Readonly<{\n    support: boolean;\n    votingPower: bigint;\n  }>;\n  strategy: Hex;\n  dataWarehouse: Hex;\n  votingAssets: Readonly<Hex[]>;\n  hasRequiredRoots: boolean;\n  voteConfig: Readonly<{\n    votingDuration: number;\n    l1ProposalBlockHash: Hex;\n  }>;\n  state: number;\n};\n\n// end\n\nexport interface PayloadForCreation {\n  chain: number;\n  accessLevel: number;\n  payloadsController: string;\n  payloadId: number;\n}\n\nexport enum BasicProposalState {\n  Null,\n  Created,\n  Active,\n  Queued,\n  Executed,\n  Failed,\n  Cancelled,\n  Expired,\n}\n\nexport enum VotingMachineProposalState {\n  NotCreated,\n  Active,\n  Finished,\n  SentToGovernance,\n}\n\nexport enum PayloadState {\n  None,\n  Created,\n  Queued,\n  Executed,\n  Cancelled,\n  Expired,\n}\n\nexport enum ProposalState {\n  Created,\n  Active,\n  Succeed,\n  Defeated,\n  Executed,\n  Expired,\n  Canceled,\n}\n\nexport type VotersData = {\n  proposalId: number;\n  address: Hex;\n  support: boolean;\n  votingPower: number;\n  transactionHash: Hex;\n  blockNumber: number;\n  chainId: number;\n  ensName?: string;\n};\n\nexport type InitialProposal = {\n  id: bigint;\n  votingChainId: number;\n  snapshotBlockHash: Hex;\n};\n\nexport type VotingMachineData = {\n  id: number;\n  forVotes: string;\n  againstVotes: string;\n  startTime: number;\n  endTime: number;\n  votingClosedAndSentBlockNumber: number;\n  votingClosedAndSentTimestamp: number;\n  l1BlockHash: Hex;\n  strategy: Hex;\n  sentToGovernance: boolean;\n  createdBlock: number;\n  votedInfo: {\n    support: boolean;\n    votingPower: string;\n  };\n  votingAssets: Readonly<Hex[]>;\n  hasRequiredRoots: boolean;\n};\n\nexport type Payload = {\n  id: number;\n  chainId: number;\n  maximumAccessLevelRequired: number;\n  state: PayloadState;\n  createdAt: number;\n  queuedAt: number;\n  executedAt: number;\n  cancelledAt: number;\n  expirationTime: number;\n  delay: number;\n  gracePeriod: number;\n  payloadsController: Hex;\n  actionAddresses: Hex[];\n};\n\n// type for create payload actions\nexport type PayloadAction = {\n  payloadAddress: Hex;\n  withDelegateCall: boolean;\n  accessLevel: number;\n  value: number;\n  signature: string;\n  callData?: string;\n};\n\nexport type VotingConfig = {\n  accessLevel: number;\n  quorum: number;\n  differential: number;\n  minPropositionPower: number;\n  coolDownBeforeVotingStart: number;\n  votingDuration: number;\n};\n\nexport type ContractsConstants = {\n  precisionDivider: string;\n  cooldownPeriod: number;\n  expirationTime: number;\n  cancellationFee: string;\n};\n\nexport type InitialPayload = {\n  id: number;\n  chainId: number;\n  payloadsController: Hex;\n};\n\nexport interface BasicProposal {\n  id: number;\n  votingDuration: number;\n  creationTime: number;\n  accessLevel: number;\n  basicState: BasicProposalState;\n  queuingTime: number;\n  ipfsHash: string;\n  initialPayloads: InitialPayload[];\n  votingMachineData: VotingMachineData;\n  snapshotBlockHash: string;\n  creator: string;\n  canceledAt: number;\n  votingActivationTime: number;\n  votingChainId: number;\n  prerender: boolean;\n}\n\nexport interface ProposalData\n  extends BasicProposal,\n    Pick<ProposalMetadata, 'title'> {\n  payloads: Payload[];\n  votingMachineState: VotingMachineProposalState;\n}\n\ntype BlockHash = string;\nexport type Balance = {\n  blockHash: string;\n  tokenName: string;\n  underlyingAsset: string;\n  value: string;\n  basicValue: string;\n  userBalance: string;\n  isWithDelegatedPower: boolean;\n};\n\nexport type VotingBalance = Record<BlockHash, Balance[]>;\n\nexport interface ProposalWithoutState {\n  data: ProposalData;\n  precisionDivider: string;\n  config: VotingConfig;\n  timings: {\n    cooldownPeriod: number;\n    expirationTime: number;\n    executionPayloadTime: number;\n  };\n  balances: Balance[];\n}\n\nexport interface Proposal extends ProposalWithoutState {\n  state: ProposalState;\n}\n\nexport interface ProposalWithLoadings {\n  loading: boolean;\n  balanceLoading: boolean;\n  proposal: Proposal;\n}\n\nexport interface ProposalWithId extends ProposalWithLoadings {\n  id: number;\n}\n\nexport enum ProposalStateWithName {\n  Created = 'Created',\n  Active = 'Voting',\n  Succeed = 'Passed',\n  Failed = 'Failed',\n  Defeated = 'Failed',\n  Executed = 'Executed',\n  Expired = 'Expired',\n  Canceled = 'Canceled',\n  ActiveAll = 'Active',\n}\n\nexport enum ProposalEstimatedState {\n  Active = 'Will open for voting',\n  Succeed = 'Will pass',\n  Defeated = 'Will fail',\n  ProposalExecuted = 'Proposal will be executed',\n  PayloadsExecuted = 'Payloads will start being executed',\n  Expired = 'Will expire',\n}\n\nexport enum ProposalWaitForState {\n  WaitForActivateVoting = 'Pending voting activation',\n  WaitForCloseVoting = 'Pending voting closure',\n  WaitForQueueProposal = 'Proposal is time-locked',\n  WaitForExecuteProposal = 'Pending proposal execution',\n  WaitForQueuePayloads = 'Payloads are time-locked',\n  WaitForExecutePayloads = 'Pending payloads execution',\n}\n\nexport type ProposalMetadata = {\n  title: string;\n  description: string;\n  shortDescription: string;\n  ipfsHash: string;\n  originalIpfsHash: string;\n  aip: number;\n  discussions: string;\n  author: string;\n};\n\nexport interface FinishedProposalForList\n  extends Pick<ProposalMetadata, 'title'> {\n  id: number;\n  state: ProposalState;\n  finishedTimestamp: number;\n  ipfsHash: string;\n}\n\nexport interface CachedProposalDataItem {\n  proposal: {\n    data: {\n      id: number;\n      finishedTimestamp: number;\n      title: string;\n      ipfsHash: string;\n    };\n    state: ProposalState;\n  };\n}\n\nexport interface CachedProposalDataItemWithId extends CachedProposalDataItem {\n  id: number;\n}\n\nexport interface CachedDetails {\n  payloads: Payload[];\n  ipfs: ProposalMetadata;\n  proposal: BasicProposal;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsEO,IAAK,qBAAL,kBAAKA,wBAAL;AACL,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AACA,EAAAA,wCAAA;AARU,SAAAA;AAAA,GAAA;AAWL,IAAK,6BAAL,kBAAKC,gCAAL;AACL,EAAAA,wDAAA;AACA,EAAAA,wDAAA;AACA,EAAAA,wDAAA;AACA,EAAAA,wDAAA;AAJU,SAAAA;AAAA,GAAA;AAOL,IAAK,eAAL,kBAAKC,kBAAL;AACL,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AACA,EAAAA,4BAAA;AANU,SAAAA;AAAA,GAAA;AASL,IAAK,gBAAL,kBAAKC,mBAAL;AACL,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AACA,EAAAA,8BAAA;AAPU,SAAAA;AAAA,GAAA;AA+JL,IAAK,wBAAL,kBAAKC,2BAAL;AACL,EAAAA,uBAAA,aAAU;AACV,EAAAA,uBAAA,YAAS;AACT,EAAAA,uBAAA,aAAU;AACV,EAAAA,uBAAA,YAAS;AACT,EAAAA,uBAAA,cAAW;AACX,EAAAA,uBAAA,cAAW;AACX,EAAAA,uBAAA,aAAU;AACV,EAAAA,uBAAA,cAAW;AACX,EAAAA,uBAAA,eAAY;AATF,SAAAA;AAAA,GAAA;AAYL,IAAK,yBAAL,kBAAKC,4BAAL;AACL,EAAAA,wBAAA,YAAS;AACT,EAAAA,wBAAA,aAAU;AACV,EAAAA,wBAAA,cAAW;AACX,EAAAA,wBAAA,sBAAmB;AACnB,EAAAA,wBAAA,sBAAmB;AACnB,EAAAA,wBAAA,aAAU;AANA,SAAAA;AAAA,GAAA;AASL,IAAK,uBAAL,kBAAKC,0BAAL;AACL,EAAAA,sBAAA,2BAAwB;AACxB,EAAAA,sBAAA,wBAAqB;AACrB,EAAAA,sBAAA,0BAAuB;AACvB,EAAAA,sBAAA,4BAAyB;AACzB,EAAAA,sBAAA,0BAAuB;AACvB,EAAAA,sBAAA,4BAAyB;AANf,SAAAA;AAAA,GAAA;","names":["BasicProposalState","VotingMachineProposalState","PayloadState","ProposalState","ProposalStateWithName","ProposalEstimatedState","ProposalWaitForState"]}